{"version":3,"file":"index.cjs.production.min.js","sources":["../src/rest/index.ts","../src/hooks/useFetch.ts","../node_modules/immer/src/utils/errors.ts","../node_modules/immer/src/utils/common.ts","../node_modules/immer/src/types/types-internal.ts","../node_modules/immer/src/utils/plugins.ts","../node_modules/immer/src/core/scope.ts","../node_modules/immer/src/core/finalize.ts","../node_modules/immer/src/core/proxy.ts","../node_modules/immer/src/core/immerClass.ts","../node_modules/immer/src/core/current.ts","../node_modules/immer/src/utils/env.ts","../node_modules/immer/src/immer.ts","../src/context-storage/default-values.ts","../src/context-storage/initial-hooks-wrapper.tsx","../src/context-storage/index.tsx","../src/hooks/useFetchContext.ts","../src/hooks/useCatalogs.ts"],"sourcesContent":["interface FetchDataResponse<T> {\r\n    success: boolean;\r\n    data: T | null;\r\n    message: string;\r\n    totalCount?: number | null;\r\n}\r\n\r\nexport type ReceivedMethodType = 'GET' | 'POST' | 'PUT'| 'DELETE';\r\ntype ReceivedDataType = string | number | Record<string, any> | FormData;\r\n\r\n/**\r\n * REST запрос\r\n * @param restName - наименование route из api\r\n * @param method - тип запроса (GET, POST, PUT, DELETE)\r\n * @param data - данные для rest запроса\r\n * @param dataType - тип тела запроса (JSON, FormData)\r\n */\r\nexport const fetchData = async <T = any>(restName: string, method: ReceivedMethodType, data?: ReceivedDataType, dataType: 'JSON' | 'FormData' = 'JSON'): Promise<FetchDataResponse<T>> => {\r\n    let additionalLink = '';\r\n    let body: FormData | string | undefined;\r\n    const headers = new Headers();\r\n\r\n    headers.append('accept', 'application/json');\r\n\r\n    if (typeof data === 'string' || typeof data === 'number') {\r\n        additionalLink = `${data}`;\r\n    }\r\n\r\n    if (typeof data !== 'string' && typeof data === 'object') {\r\n        if (dataType === 'JSON') {\r\n            headers.append('content-type', 'application/json');\r\n\r\n            body = JSON.stringify(data);\r\n        }\r\n\r\n        if (dataType === 'FormData') {\r\n            body = data as FormData;\r\n        }\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(`${restName}${additionalLink}`, {\r\n            method,\r\n            body,\r\n            headers,\r\n            credentials: 'same-origin',\r\n        });\r\n\r\n        if (response.ok === false) {\r\n            if (response.status === 401) {\r\n                throw new Error('Ошибка авторизации пользователя.');\r\n            } else {\r\n                throw new Error(`${response.url} (${response.status})`);\r\n            }\r\n        }\r\n\r\n        try {\r\n            const json = await response.json();\r\n\r\n            return json;\r\n        } catch (err) {\r\n            throw new Error(err);\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n\r\n        return {\r\n            success: false,\r\n            message: err,\r\n            data: null,\r\n        };\r\n    }\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { fetchData } from \"../rest\";\r\nimport { UseFetchInterface, UseFetchParams } from \"../types/use-fetch\";\r\n\r\nconst defaultHook = <T = any>(params: UseFetchParams<T>): UseFetchInterface<T> => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [data, setData] = useState<T>(params.defaultValue);\r\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\r\n\r\n  const getData = async () => {\r\n    setLoading(true);\r\n\r\n    const result = await fetchData<T>(\r\n      params.rest.name,\r\n      params.rest.method,\r\n      params.rest.body\r\n    );\r\n\r\n    if (result.success && result.data) {\r\n      setData(result.data);\r\n    } else if (result.success === false) {\r\n      setErrorMessage(result.message);\r\n    }\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [params.rest.body]);\r\n\r\n  return {\r\n    data,\r\n    error: errorMessage,\r\n    loading,\r\n  };\r\n};\r\n\r\nexport default defaultHook;\r\n","const errors = {\n\t0: \"Illegal state\",\n\t1: \"Immer drafts cannot have computed properties\",\n\t2: \"This object has been frozen and should not be mutated\",\n\t3(data: any) {\n\t\treturn (\n\t\t\t\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" +\n\t\t\tdata\n\t\t)\n\t},\n\t4: \"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\n\t5: \"Immer forbids circular references\",\n\t6: \"The first or second argument to `produce` must be a function\",\n\t7: \"The third argument to `produce` must be a function or undefined\",\n\t8: \"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\n\t9: \"First argument to `finishDraft` must be a draft returned by `createDraft`\",\n\t10: \"The given draft is already finalized\",\n\t11: \"Object.defineProperty() cannot be used on an Immer draft\",\n\t12: \"Object.setPrototypeOf() cannot be used on an Immer draft\",\n\t13: \"Immer only supports deleting array indices\",\n\t14: \"Immer only supports setting array indices and the 'length' property\",\n\t15(path: string) {\n\t\treturn \"Cannot apply patch, path doesn't resolve: \" + path\n\t},\n\t16: 'Sets cannot have \"replace\" patches.',\n\t17(op: string) {\n\t\treturn \"Unsupported patch operation: \" + op\n\t},\n\t18(plugin: string) {\n\t\treturn `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \\`enable${plugin}()\\` when initializing your application.`\n\t},\n\t20: \"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available\",\n\t21(thing: string) {\n\t\treturn `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`\n\t},\n\t22(thing: string) {\n\t\treturn `'current' expects a draft, got: ${thing}`\n\t},\n\t23(thing: string) {\n\t\treturn `'original' expects a draft, got: ${thing}`\n\t},\n\t24: \"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"\n} as const\n\nexport function die(error: keyof typeof errors, ...args: any[]): never {\n\tif (__DEV__) {\n\t\tconst e = errors[error]\n\t\tconst msg = !e\n\t\t\t? \"unknown error nr: \" + error\n\t\t\t: typeof e === \"function\"\n\t\t\t? e.apply(null, args as any)\n\t\t\t: e\n\t\tthrow new Error(`[Immer] ${msg}`)\n\t}\n\tthrow new Error(\n\t\t`[Immer] minified error nr: ${error}${\n\t\t\targs.length ? \" \" + args.map(s => `'${s}'`).join(\",\") : \"\"\n\t\t}. Find the full error at: https://bit.ly/3cXEKWf`\n\t)\n}\n","import {\n\tDRAFT_STATE,\n\tDRAFTABLE,\n\thasSet,\n\tObjectish,\n\tDrafted,\n\tAnyObject,\n\tAnyMap,\n\tAnySet,\n\tImmerState,\n\thasMap,\n\tArchtypeObject,\n\tArchtypeArray,\n\tArchtypeMap,\n\tArchtypeSet,\n\tdie\n} from \"../internal\"\n\n/** Returns true if the given value is an Immer draft */\n/*#__PURE__*/\nexport function isDraft(value: any): boolean {\n\treturn !!value && !!value[DRAFT_STATE]\n}\n\n/** Returns true if the given value can be drafted by Immer */\n/*#__PURE__*/\nexport function isDraftable(value: any): boolean {\n\tif (!value) return false\n\treturn (\n\t\tisPlainObject(value) ||\n\t\tArray.isArray(value) ||\n\t\t!!value[DRAFTABLE] ||\n\t\t!!value.constructor[DRAFTABLE] ||\n\t\tisMap(value) ||\n\t\tisSet(value)\n\t)\n}\n\n/*#__PURE__*/\nexport function isPlainObject(value: any): boolean {\n\tif (!value || typeof value !== \"object\") return false\n\tconst proto = Object.getPrototypeOf(value)\n\treturn !proto || proto === Object.prototype\n}\n\n/** Get the underlying object that is represented by the given draft */\n/*#__PURE__*/\nexport function original<T>(value: T): T | undefined\nexport function original(value: Drafted<any>): any {\n\tif (!isDraft(value)) die(23, value)\n\treturn value[DRAFT_STATE].base_\n}\n\n/*#__PURE__*/\nexport const ownKeys: (target: AnyObject) => PropertyKey[] =\n\ttypeof Reflect !== \"undefined\" && Reflect.ownKeys\n\t\t? Reflect.ownKeys\n\t\t: typeof Object.getOwnPropertySymbols !== \"undefined\"\n\t\t? obj =>\n\t\t\t\tObject.getOwnPropertyNames(obj).concat(\n\t\t\t\t\tObject.getOwnPropertySymbols(obj) as any\n\t\t\t\t)\n\t\t: /* istanbul ignore next */ Object.getOwnPropertyNames\n\nexport const getOwnPropertyDescriptors =\n\tObject.getOwnPropertyDescriptors ||\n\tfunction getOwnPropertyDescriptors(target: any) {\n\t\t// Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274\n\t\tconst res: any = {}\n\t\townKeys(target).forEach(key => {\n\t\t\tres[key] = Object.getOwnPropertyDescriptor(target, key)\n\t\t})\n\t\treturn res\n\t}\n\nexport function each<T extends Objectish>(\n\tobj: T,\n\titer: (key: string | number, value: any, source: T) => void,\n\tenumerableOnly?: boolean\n): void\nexport function each(obj: any, iter: any, enumerableOnly = false) {\n\tif (getArchtype(obj) === ArchtypeObject) {\n\t\t;(enumerableOnly ? Object.keys : ownKeys)(obj).forEach(key => {\n\t\t\tif (!enumerableOnly || typeof key !== \"symbol\") iter(key, obj[key], obj)\n\t\t})\n\t} else {\n\t\tobj.forEach((entry: any, index: any) => iter(index, entry, obj))\n\t}\n}\n\n/*#__PURE__*/\nexport function getArchtype(thing: any): 0 | 1 | 2 | 3 {\n\t/* istanbul ignore next */\n\tconst state: undefined | ImmerState = thing[DRAFT_STATE]\n\treturn state\n\t\t? state.type_ > 3\n\t\t\t? state.type_ - 4 // cause Object and Array map back from 4 and 5\n\t\t\t: (state.type_ as any) // others are the same\n\t\t: Array.isArray(thing)\n\t\t? ArchtypeArray\n\t\t: isMap(thing)\n\t\t? ArchtypeMap\n\t\t: isSet(thing)\n\t\t? ArchtypeSet\n\t\t: ArchtypeObject\n}\n\n/*#__PURE__*/\nexport function has(thing: any, prop: PropertyKey): boolean {\n\treturn getArchtype(thing) === ArchtypeMap\n\t\t? thing.has(prop)\n\t\t: Object.prototype.hasOwnProperty.call(thing, prop)\n}\n\n/*#__PURE__*/\nexport function get(thing: AnyMap | AnyObject, prop: PropertyKey): any {\n\t// @ts-ignore\n\treturn getArchtype(thing) === ArchtypeMap ? thing.get(prop) : thing[prop]\n}\n\n/*#__PURE__*/\nexport function set(thing: any, propOrOldValue: PropertyKey, value: any) {\n\tconst t = getArchtype(thing)\n\tif (t === ArchtypeMap) thing.set(propOrOldValue, value)\n\telse if (t === ArchtypeSet) {\n\t\tthing.delete(propOrOldValue)\n\t\tthing.add(value)\n\t} else thing[propOrOldValue] = value\n}\n\n/*#__PURE__*/\nexport function is(x: any, y: any): boolean {\n\t// From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n\tif (x === y) {\n\t\treturn x !== 0 || 1 / x === 1 / y\n\t} else {\n\t\treturn x !== x && y !== y\n\t}\n}\n\n/*#__PURE__*/\nexport function isMap(target: any): target is AnyMap {\n\treturn hasMap && target instanceof Map\n}\n\n/*#__PURE__*/\nexport function isSet(target: any): target is AnySet {\n\treturn hasSet && target instanceof Set\n}\n/*#__PURE__*/\nexport function latest(state: ImmerState): any {\n\treturn state.copy_ || state.base_\n}\n\n/*#__PURE__*/\nexport function shallowCopy(base: any) {\n\tif (Array.isArray(base)) return Array.prototype.slice.call(base)\n\tconst descriptors = getOwnPropertyDescriptors(base)\n\tdelete descriptors[DRAFT_STATE as any]\n\tlet keys = ownKeys(descriptors)\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tconst key: any = keys[i]\n\t\tconst desc = descriptors[key]\n\t\tif (desc.writable === false) {\n\t\t\tdesc.writable = true\n\t\t\tdesc.configurable = true\n\t\t}\n\t\t// like object.assign, we will read any _own_, get/set accessors. This helps in dealing\n\t\t// with libraries that trap values, like mobx or vue\n\t\t// unlike object.assign, non-enumerables will be copied as well\n\t\tif (desc.get || desc.set)\n\t\t\tdescriptors[key] = {\n\t\t\t\tconfigurable: true,\n\t\t\t\twritable: true, // could live with !!desc.set as well here...\n\t\t\t\tenumerable: desc.enumerable,\n\t\t\t\tvalue: base[key]\n\t\t\t}\n\t}\n\treturn Object.create(Object.getPrototypeOf(base), descriptors)\n}\n\n/**\n * Freezes draftable objects. Returns the original object.\n * By default freezes shallowly, but if the second argument is `true` it will freeze recursively.\n *\n * @param obj\n * @param deep\n */\nexport function freeze<T>(obj: T, deep?: boolean): T\nexport function freeze<T>(obj: any, deep: boolean = false): T {\n\tif (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj\n\tif (getArchtype(obj) > 1 /* Map or Set */) {\n\t\tobj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections as any\n\t}\n\tObject.freeze(obj)\n\tif (deep) each(obj, (key, value) => freeze(value, true), true)\n\treturn obj\n}\n\nfunction dontMutateFrozenCollections() {\n\tdie(2)\n}\n\nexport function isFrozen(obj: any): boolean {\n\tif (obj == null || typeof obj !== \"object\") return true\n\t// See #600, IE dies on non-objects in Object.isFrozen\n\treturn Object.isFrozen(obj)\n}\n","import {\n\tSetState,\n\tImmerScope,\n\tProxyObjectState,\n\tProxyArrayState,\n\tES5ObjectState,\n\tES5ArrayState,\n\tMapState,\n\tDRAFT_STATE\n} from \"../internal\"\n\nexport type Objectish = AnyObject | AnyArray | AnyMap | AnySet\nexport type ObjectishNoSet = AnyObject | AnyArray | AnyMap\n\nexport type AnyObject = {[key: string]: any}\nexport type AnyArray = Array<any>\nexport type AnySet = Set<any>\nexport type AnyMap = Map<any, any>\n\nexport const ArchtypeObject = 0\nexport const ArchtypeArray = 1\nexport const ArchtypeMap = 2\nexport const ArchtypeSet = 3\n\nexport const ProxyTypeProxyObject = 0\nexport const ProxyTypeProxyArray = 1\nexport const ProxyTypeES5Object = 4\nexport const ProxyTypeES5Array = 5\nexport const ProxyTypeMap = 2\nexport const ProxyTypeSet = 3\n\nexport interface ImmerBaseState {\n\tparent_?: ImmerState\n\tscope_: ImmerScope\n\tmodified_: boolean\n\tfinalized_: boolean\n\tisManual_: boolean\n}\n\nexport type ImmerState =\n\t| ProxyObjectState\n\t| ProxyArrayState\n\t| ES5ObjectState\n\t| ES5ArrayState\n\t| MapState\n\t| SetState\n\n// The _internal_ type used for drafts (not to be confused with Draft, which is public facing)\nexport type Drafted<Base = any, T extends ImmerState = ImmerState> = {\n\t[DRAFT_STATE]: T\n} & Base\n","import {\n\tImmerState,\n\tPatch,\n\tImmerScope,\n\tDrafted,\n\tAnyObject,\n\tImmerBaseState,\n\tAnyMap,\n\tAnySet,\n\tProxyTypeES5Array,\n\tProxyTypeES5Object,\n\tProxyTypeMap,\n\tProxyTypeSet,\n\tdie\n} from \"../internal\"\n\n/** Plugin utilities */\nconst plugins: {\n\tPatches?: {\n\t\tgeneratePatches_(\n\t\t\tstate: ImmerState,\n\t\t\tbasePath: PatchPath,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tgenerateReplacementPatches_(\n\t\t\trootState: ImmerState,\n\t\t\treplacement: any,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tapplyPatches_<T>(draft: T, patches: Patch[]): T\n\t}\n\tES5?: {\n\t\twillFinalizeES5_(scope: ImmerScope, result: any, isReplaced: boolean): void\n\t\tcreateES5Proxy_<T>(\n\t\t\tbase: T,\n\t\t\tparent?: ImmerState\n\t\t): Drafted<T, ES5ObjectState | ES5ArrayState>\n\t\thasChanges_(state: ES5ArrayState | ES5ObjectState): boolean\n\t}\n\tMapSet?: {\n\t\tproxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T\n\t\tproxySet_<T extends AnySet>(target: T, parent?: ImmerState): T\n\t}\n} = {}\n\ntype Plugins = typeof plugins\n\nexport function getPlugin<K extends keyof Plugins>(\n\tpluginKey: K\n): Exclude<Plugins[K], undefined> {\n\tconst plugin = plugins[pluginKey]\n\tif (!plugin) {\n\t\tdie(18, pluginKey)\n\t}\n\t// @ts-ignore\n\treturn plugin\n}\n\nexport function loadPlugin<K extends keyof Plugins>(\n\tpluginKey: K,\n\timplementation: Plugins[K]\n): void {\n\tif (!plugins[pluginKey]) plugins[pluginKey] = implementation\n}\n\n/** ES5 Plugin */\n\ninterface ES5BaseState extends ImmerBaseState {\n\tassigned_: {[key: string]: any}\n\tparent_?: ImmerState\n\trevoked_: boolean\n}\n\nexport interface ES5ObjectState extends ES5BaseState {\n\ttype_: typeof ProxyTypeES5Object\n\tdraft_: Drafted<AnyObject, ES5ObjectState>\n\tbase_: AnyObject\n\tcopy_: AnyObject | null\n}\n\nexport interface ES5ArrayState extends ES5BaseState {\n\ttype_: typeof ProxyTypeES5Array\n\tdraft_: Drafted<AnyObject, ES5ArrayState>\n\tbase_: any\n\tcopy_: any\n}\n\n/** Map / Set plugin */\n\nexport interface MapState extends ImmerBaseState {\n\ttype_: typeof ProxyTypeMap\n\tcopy_: AnyMap | undefined\n\tassigned_: Map<any, boolean> | undefined\n\tbase_: AnyMap\n\trevoked_: boolean\n\tdraft_: Drafted<AnyMap, MapState>\n}\n\nexport interface SetState extends ImmerBaseState {\n\ttype_: typeof ProxyTypeSet\n\tcopy_: AnySet | undefined\n\tbase_: AnySet\n\tdrafts_: Map<any, Drafted> // maps the original value to the draft value in the new set\n\trevoked_: boolean\n\tdraft_: Drafted<AnySet, SetState>\n}\n\n/** Patches plugin */\n\nexport type PatchPath = (string | number)[]\n","import {\n\tPatch,\n\tPatchListener,\n\tDrafted,\n\tImmer,\n\tDRAFT_STATE,\n\tImmerState,\n\tProxyTypeProxyObject,\n\tProxyTypeProxyArray,\n\tgetPlugin\n} from \"../internal\"\nimport {die} from \"../utils/errors\"\n\n/** Each scope represents a `produce` call. */\n\nexport interface ImmerScope {\n\tpatches_?: Patch[]\n\tinversePatches_?: Patch[]\n\tcanAutoFreeze_: boolean\n\tdrafts_: any[]\n\tparent_?: ImmerScope\n\tpatchListener_?: PatchListener\n\timmer_: Immer\n\tunfinalizedDrafts_: number\n}\n\nlet currentScope: ImmerScope | undefined\n\nexport function getCurrentScope() {\n\tif (__DEV__ && !currentScope) die(0)\n\treturn currentScope!\n}\n\nfunction createScope(\n\tparent_: ImmerScope | undefined,\n\timmer_: Immer\n): ImmerScope {\n\treturn {\n\t\tdrafts_: [],\n\t\tparent_,\n\t\timmer_,\n\t\t// Whenever the modified draft contains a draft from another scope, we\n\t\t// need to prevent auto-freezing so the unowned draft can be finalized.\n\t\tcanAutoFreeze_: true,\n\t\tunfinalizedDrafts_: 0\n\t}\n}\n\nexport function usePatchesInScope(\n\tscope: ImmerScope,\n\tpatchListener?: PatchListener\n) {\n\tif (patchListener) {\n\t\tgetPlugin(\"Patches\") // assert we have the plugin\n\t\tscope.patches_ = []\n\t\tscope.inversePatches_ = []\n\t\tscope.patchListener_ = patchListener\n\t}\n}\n\nexport function revokeScope(scope: ImmerScope) {\n\tleaveScope(scope)\n\tscope.drafts_.forEach(revokeDraft)\n\t// @ts-ignore\n\tscope.drafts_ = null\n}\n\nexport function leaveScope(scope: ImmerScope) {\n\tif (scope === currentScope) {\n\t\tcurrentScope = scope.parent_\n\t}\n}\n\nexport function enterScope(immer: Immer) {\n\treturn (currentScope = createScope(currentScope, immer))\n}\n\nfunction revokeDraft(draft: Drafted) {\n\tconst state: ImmerState = draft[DRAFT_STATE]\n\tif (\n\t\tstate.type_ === ProxyTypeProxyObject ||\n\t\tstate.type_ === ProxyTypeProxyArray\n\t)\n\t\tstate.revoke_()\n\telse state.revoked_ = true\n}\n","import {\n\tImmerScope,\n\tDRAFT_STATE,\n\tisDraftable,\n\tNOTHING,\n\tPatchPath,\n\teach,\n\thas,\n\tfreeze,\n\tImmerState,\n\tisDraft,\n\tSetState,\n\tset,\n\tProxyTypeES5Object,\n\tProxyTypeES5Array,\n\tProxyTypeSet,\n\tgetPlugin,\n\tdie,\n\trevokeScope,\n\tisFrozen,\n\tshallowCopy\n} from \"../internal\"\n\nexport function processResult(result: any, scope: ImmerScope) {\n\tscope.unfinalizedDrafts_ = scope.drafts_.length\n\tconst baseDraft = scope.drafts_![0]\n\tconst isReplaced = result !== undefined && result !== baseDraft\n\tif (!scope.immer_.useProxies_)\n\t\tgetPlugin(\"ES5\").willFinalizeES5_(scope, result, isReplaced)\n\tif (isReplaced) {\n\t\tif (baseDraft[DRAFT_STATE].modified_) {\n\t\t\trevokeScope(scope)\n\t\t\tdie(4)\n\t\t}\n\t\tif (isDraftable(result)) {\n\t\t\t// Finalize the result in case it contains (or is) a subset of the draft.\n\t\t\tresult = finalize(scope, result)\n\t\t\tif (!scope.parent_) maybeFreeze(scope, result)\n\t\t}\n\t\tif (scope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(\n\t\t\t\tbaseDraft[DRAFT_STATE],\n\t\t\t\tresult,\n\t\t\t\tscope.patches_,\n\t\t\t\tscope.inversePatches_!\n\t\t\t)\n\t\t}\n\t} else {\n\t\t// Finalize the base draft.\n\t\tresult = finalize(scope, baseDraft, [])\n\t}\n\trevokeScope(scope)\n\tif (scope.patches_) {\n\t\tscope.patchListener_!(scope.patches_, scope.inversePatches_!)\n\t}\n\treturn result !== NOTHING ? result : undefined\n}\n\nfunction finalize(rootScope: ImmerScope, value: any, path?: PatchPath) {\n\t// Don't recurse in tho recursive data structures\n\tif (isFrozen(value)) return value\n\n\tconst state: ImmerState = value[DRAFT_STATE]\n\t// A plain object, might need freezing, might contain drafts\n\tif (!state) {\n\t\teach(\n\t\t\tvalue,\n\t\t\t(key, childValue) =>\n\t\t\t\tfinalizeProperty(rootScope, state, value, key, childValue, path),\n\t\t\ttrue // See #590, don't recurse into non-enumarable of non drafted objects\n\t\t)\n\t\treturn value\n\t}\n\t// Never finalize drafts owned by another scope.\n\tif (state.scope_ !== rootScope) return value\n\t// Unmodified draft, return the (frozen) original\n\tif (!state.modified_) {\n\t\tmaybeFreeze(rootScope, state.base_, true)\n\t\treturn state.base_\n\t}\n\t// Not finalized yet, let's do that now\n\tif (!state.finalized_) {\n\t\tstate.finalized_ = true\n\t\tstate.scope_.unfinalizedDrafts_--\n\t\tconst result =\n\t\t\t// For ES5, create a good copy from the draft first, with added keys and without deleted keys.\n\t\t\tstate.type_ === ProxyTypeES5Object || state.type_ === ProxyTypeES5Array\n\t\t\t\t? (state.copy_ = shallowCopy(state.draft_))\n\t\t\t\t: state.copy_\n\t\t// Finalize all children of the copy\n\t\t// For sets we clone before iterating, otherwise we can get in endless loop due to modifying during iteration, see #628\n\t\t// Although the original test case doesn't seem valid anyway, so if this in the way we can turn the next line\n\t\t// back to each(result, ....)\n\t\teach(\n\t\t\tstate.type_ === ProxyTypeSet ? new Set(result) : result,\n\t\t\t(key, childValue) =>\n\t\t\t\tfinalizeProperty(rootScope, state, result, key, childValue, path)\n\t\t)\n\t\t// everything inside is frozen, we can freeze here\n\t\tmaybeFreeze(rootScope, result, false)\n\t\t// first time finalizing, let's create those patches\n\t\tif (path && rootScope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generatePatches_(\n\t\t\t\tstate,\n\t\t\t\tpath,\n\t\t\t\trootScope.patches_,\n\t\t\t\trootScope.inversePatches_!\n\t\t\t)\n\t\t}\n\t}\n\treturn state.copy_\n}\n\nfunction finalizeProperty(\n\trootScope: ImmerScope,\n\tparentState: undefined | ImmerState,\n\ttargetObject: any,\n\tprop: string | number,\n\tchildValue: any,\n\trootPath?: PatchPath\n) {\n\tif (__DEV__ && childValue === targetObject) die(5)\n\tif (isDraft(childValue)) {\n\t\tconst path =\n\t\t\trootPath &&\n\t\t\tparentState &&\n\t\t\tparentState!.type_ !== ProxyTypeSet && // Set objects are atomic since they have no keys.\n\t\t\t!has((parentState as Exclude<ImmerState, SetState>).assigned_!, prop) // Skip deep patches for assigned keys.\n\t\t\t\t? rootPath!.concat(prop)\n\t\t\t\t: undefined\n\t\t// Drafts owned by `scope` are finalized here.\n\t\tconst res = finalize(rootScope, childValue, path)\n\t\tset(targetObject, prop, res)\n\t\t// Drafts from another scope must prevented to be frozen\n\t\t// if we got a draft back from finalize, we're in a nested produce and shouldn't freeze\n\t\tif (isDraft(res)) {\n\t\t\trootScope.canAutoFreeze_ = false\n\t\t} else return\n\t}\n\t// Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n\tif (isDraftable(childValue) && !isFrozen(childValue)) {\n\t\tif (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\n\t\t\t// optimization: if an object is not a draft, and we don't have to\n\t\t\t// deepfreeze everything, and we are sure that no drafts are left in the remaining object\n\t\t\t// cause we saw and finalized all drafts already; we can stop visiting the rest of the tree.\n\t\t\t// This benefits especially adding large data tree's without further processing.\n\t\t\t// See add-data.js perf test\n\t\t\treturn\n\t\t}\n\t\tfinalize(rootScope, childValue)\n\t\t// immer deep freezes plain objects, so if there is no parent state, we freeze as well\n\t\tif (!parentState || !parentState.scope_.parent_)\n\t\t\tmaybeFreeze(rootScope, childValue)\n\t}\n}\n\nfunction maybeFreeze(scope: ImmerScope, value: any, deep = false) {\n\tif (scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\n\t\tfreeze(value, deep)\n\t}\n}\n","import {\n\teach,\n\thas,\n\tis,\n\tisDraftable,\n\tshallowCopy,\n\tlatest,\n\tImmerBaseState,\n\tImmerState,\n\tDrafted,\n\tAnyObject,\n\tAnyArray,\n\tObjectish,\n\tgetCurrentScope,\n\tDRAFT_STATE,\n\tdie,\n\tcreateProxy,\n\tProxyTypeProxyObject,\n\tProxyTypeProxyArray\n} from \"../internal\"\n\ninterface ProxyBaseState extends ImmerBaseState {\n\tassigned_: {\n\t\t[property: string]: boolean\n\t}\n\tparent_?: ImmerState\n\trevoke_(): void\n}\n\nexport interface ProxyObjectState extends ProxyBaseState {\n\ttype_: typeof ProxyTypeProxyObject\n\tbase_: any\n\tcopy_: any\n\tdraft_: Drafted<AnyObject, ProxyObjectState>\n}\n\nexport interface ProxyArrayState extends ProxyBaseState {\n\ttype_: typeof ProxyTypeProxyArray\n\tbase_: AnyArray\n\tcopy_: AnyArray | null\n\tdraft_: Drafted<AnyArray, ProxyArrayState>\n}\n\ntype ProxyState = ProxyObjectState | ProxyArrayState\n\n/**\n * Returns a new draft of the `base` object.\n *\n * The second argument is the parent draft-state (used internally).\n */\nexport function createProxyProxy<T extends Objectish>(\n\tbase: T,\n\tparent?: ImmerState\n): Drafted<T, ProxyState> {\n\tconst isArray = Array.isArray(base)\n\tconst state: ProxyState = {\n\t\ttype_: isArray ? ProxyTypeProxyArray : (ProxyTypeProxyObject as any),\n\t\t// Track which produce call this is associated with.\n\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t// True for both shallow and deep changes.\n\t\tmodified_: false,\n\t\t// Used during finalization.\n\t\tfinalized_: false,\n\t\t// Track which properties have been assigned (true) or deleted (false).\n\t\tassigned_: {},\n\t\t// The parent draft state.\n\t\tparent_: parent,\n\t\t// The base state.\n\t\tbase_: base,\n\t\t// The base proxy.\n\t\tdraft_: null as any, // set below\n\t\t// The base copy with any updated values.\n\t\tcopy_: null,\n\t\t// Called by the `produce` function.\n\t\trevoke_: null as any,\n\t\tisManual_: false\n\t}\n\n\t// the traps must target something, a bit like the 'real' base.\n\t// but also, we need to be able to determine from the target what the relevant state is\n\t// (to avoid creating traps per instance to capture the state in closure,\n\t// and to avoid creating weird hidden properties as well)\n\t// So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)\n\t// Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb\n\tlet target: T = state as any\n\tlet traps: ProxyHandler<object | Array<any>> = objectTraps\n\tif (isArray) {\n\t\ttarget = [state] as any\n\t\ttraps = arrayTraps\n\t}\n\n\tconst {revoke, proxy} = Proxy.revocable(target, traps)\n\tstate.draft_ = proxy as any\n\tstate.revoke_ = revoke\n\treturn proxy as any\n}\n\n/**\n * Object drafts\n */\nexport const objectTraps: ProxyHandler<ProxyState> = {\n\tget(state, prop) {\n\t\tif (prop === DRAFT_STATE) return state\n\n\t\tconst source = latest(state)\n\t\tif (!has(source, prop)) {\n\t\t\t// non-existing or non-own property...\n\t\t\treturn readPropFromProto(state, source, prop)\n\t\t}\n\t\tconst value = source[prop]\n\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\treturn value\n\t\t}\n\t\t// Check for existing draft in modified state.\n\t\t// Assigned values are never drafted. This catches any drafts we created, too.\n\t\tif (value === peek(state.base_, prop)) {\n\t\t\tprepareCopy(state)\n\t\t\treturn (state.copy_![prop as any] = createProxy(\n\t\t\t\tstate.scope_.immer_,\n\t\t\t\tvalue,\n\t\t\t\tstate\n\t\t\t))\n\t\t}\n\t\treturn value\n\t},\n\thas(state, prop) {\n\t\treturn prop in latest(state)\n\t},\n\townKeys(state) {\n\t\treturn Reflect.ownKeys(latest(state))\n\t},\n\tset(\n\t\tstate: ProxyObjectState,\n\t\tprop: string /* strictly not, but helps TS */,\n\t\tvalue\n\t) {\n\t\tconst desc = getDescriptorFromProto(latest(state), prop)\n\t\tif (desc?.set) {\n\t\t\t// special case: if this write is captured by a setter, we have\n\t\t\t// to trigger it with the correct context\n\t\t\tdesc.set.call(state.draft_, value)\n\t\t\treturn true\n\t\t}\n\t\tif (!state.modified_) {\n\t\t\t// the last check is because we need to be able to distinguish setting a non-existig to undefined (which is a change)\n\t\t\t// from setting an existing property with value undefined to undefined (which is not a change)\n\t\t\tconst current = peek(latest(state), prop)\n\t\t\t// special case, if we assigning the original value to a draft, we can ignore the assignment\n\t\t\tconst currentState: ProxyObjectState = current?.[DRAFT_STATE]\n\t\t\tif (currentState && currentState.base_ === value) {\n\t\t\t\tstate.copy_![prop] = value\n\t\t\t\tstate.assigned_[prop] = false\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tif (is(value, current) && (value !== undefined || has(state.base_, prop)))\n\t\t\t\treturn true\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t}\n\t\t// @ts-ignore\n\t\tstate.copy_![prop] = value\n\t\tstate.assigned_[prop] = true\n\t\treturn true\n\t},\n\tdeleteProperty(state, prop: string) {\n\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\tif (peek(state.base_, prop) !== undefined || prop in state.base_) {\n\t\t\tstate.assigned_[prop] = false\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t} else {\n\t\t\t// if an originally not assigned property was deleted\n\t\t\tdelete state.assigned_[prop]\n\t\t}\n\t\t// @ts-ignore\n\t\tif (state.copy_) delete state.copy_[prop]\n\t\treturn true\n\t},\n\t// Note: We never coerce `desc.value` into an Immer draft, because we can't make\n\t// the same guarantee in ES5 mode.\n\tgetOwnPropertyDescriptor(state, prop) {\n\t\tconst owner = latest(state)\n\t\tconst desc = Reflect.getOwnPropertyDescriptor(owner, prop)\n\t\tif (!desc) return desc\n\t\treturn {\n\t\t\twritable: true,\n\t\t\tconfigurable: state.type_ !== ProxyTypeProxyArray || prop !== \"length\",\n\t\t\tenumerable: desc.enumerable,\n\t\t\tvalue: owner[prop]\n\t\t}\n\t},\n\tdefineProperty() {\n\t\tdie(11)\n\t},\n\tgetPrototypeOf(state) {\n\t\treturn Object.getPrototypeOf(state.base_)\n\t},\n\tsetPrototypeOf() {\n\t\tdie(12)\n\t}\n}\n\n/**\n * Array drafts\n */\n\nconst arrayTraps: ProxyHandler<[ProxyArrayState]> = {}\neach(objectTraps, (key, fn) => {\n\t// @ts-ignore\n\tarrayTraps[key] = function() {\n\t\targuments[0] = arguments[0][0]\n\t\treturn fn.apply(this, arguments)\n\t}\n})\narrayTraps.deleteProperty = function(state, prop) {\n\tif (__DEV__ && isNaN(parseInt(prop as any))) die(13)\n\treturn objectTraps.deleteProperty!.call(this, state[0], prop)\n}\narrayTraps.set = function(state, prop, value) {\n\tif (__DEV__ && prop !== \"length\" && isNaN(parseInt(prop as any))) die(14)\n\treturn objectTraps.set!.call(this, state[0], prop, value, state[0])\n}\n\n// Access a property without creating an Immer draft.\nfunction peek(draft: Drafted, prop: PropertyKey) {\n\tconst state = draft[DRAFT_STATE]\n\tconst source = state ? latest(state) : draft\n\treturn source[prop]\n}\n\nfunction readPropFromProto(state: ImmerState, source: any, prop: PropertyKey) {\n\tconst desc = getDescriptorFromProto(source, prop)\n\treturn desc\n\t\t? `value` in desc\n\t\t\t? desc.value\n\t\t\t: // This is a very special case, if the prop is a getter defined by the\n\t\t\t  // prototype, we should invoke it with the draft as context!\n\t\t\t  desc.get?.call(state.draft_)\n\t\t: undefined\n}\n\nfunction getDescriptorFromProto(\n\tsource: any,\n\tprop: PropertyKey\n): PropertyDescriptor | undefined {\n\t// 'in' checks proto!\n\tif (!(prop in source)) return undefined\n\tlet proto = Object.getPrototypeOf(source)\n\twhile (proto) {\n\t\tconst desc = Object.getOwnPropertyDescriptor(proto, prop)\n\t\tif (desc) return desc\n\t\tproto = Object.getPrototypeOf(proto)\n\t}\n\treturn undefined\n}\n\nexport function markChanged(state: ImmerState) {\n\tif (!state.modified_) {\n\t\tstate.modified_ = true\n\t\tif (state.parent_) {\n\t\t\tmarkChanged(state.parent_)\n\t\t}\n\t}\n}\n\nexport function prepareCopy(state: {base_: any; copy_: any}) {\n\tif (!state.copy_) {\n\t\tstate.copy_ = shallowCopy(state.base_)\n\t}\n}\n","import {\n\tIProduceWithPatches,\n\tIProduce,\n\tImmerState,\n\tDrafted,\n\tisDraftable,\n\tprocessResult,\n\tPatch,\n\tObjectish,\n\tDRAFT_STATE,\n\tDraft,\n\tPatchListener,\n\tisDraft,\n\tisMap,\n\tisSet,\n\tcreateProxyProxy,\n\tgetPlugin,\n\tdie,\n\thasProxies,\n\tenterScope,\n\trevokeScope,\n\tleaveScope,\n\tusePatchesInScope,\n\tgetCurrentScope,\n\tNOTHING,\n\tfreeze,\n\tcurrent\n} from \"../internal\"\n\ninterface ProducersFns {\n\tproduce: IProduce\n\tproduceWithPatches: IProduceWithPatches\n}\n\nexport class Immer implements ProducersFns {\n\tuseProxies_: boolean = hasProxies\n\n\tautoFreeze_: boolean = true\n\n\tconstructor(config?: {useProxies?: boolean; autoFreeze?: boolean}) {\n\t\tif (typeof config?.useProxies === \"boolean\")\n\t\t\tthis.setUseProxies(config!.useProxies)\n\t\tif (typeof config?.autoFreeze === \"boolean\")\n\t\t\tthis.setAutoFreeze(config!.autoFreeze)\n\t\tthis.produce = this.produce.bind(this)\n\t\tthis.produceWithPatches = this.produceWithPatches.bind(this)\n\t}\n\n\t/**\n\t * The `produce` function takes a value and a \"recipe function\" (whose\n\t * return value often depends on the base state). The recipe function is\n\t * free to mutate its first argument however it wants. All mutations are\n\t * only ever applied to a __copy__ of the base state.\n\t *\n\t * Pass only a function to create a \"curried producer\" which relieves you\n\t * from passing the recipe function every time.\n\t *\n\t * Only plain objects and arrays are made mutable. All other objects are\n\t * considered uncopyable.\n\t *\n\t * Note: This function is __bound__ to its `Immer` instance.\n\t *\n\t * @param {any} base - the initial state\n\t * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n\t * @param {Function} patchListener - optional function that will be called with all the patches produced here\n\t * @returns {any} a new state, or the initial state if nothing was modified\n\t */\n\tproduce(base: any, recipe?: any, patchListener?: any) {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\" && typeof recipe !== \"function\") {\n\t\t\tconst defaultBase = recipe\n\t\t\trecipe = base\n\n\t\t\tconst self = this\n\t\t\treturn function curriedProduce(\n\t\t\t\tthis: any,\n\t\t\t\tbase = defaultBase,\n\t\t\t\t...args: any[]\n\t\t\t) {\n\t\t\t\treturn self.produce(base, (draft: Drafted) => recipe.call(this, draft, ...args)) // prettier-ignore\n\t\t\t}\n\t\t}\n\n\t\tif (typeof recipe !== \"function\") die(6)\n\t\tif (patchListener !== undefined && typeof patchListener !== \"function\")\n\t\t\tdie(7)\n\n\t\tlet result\n\n\t\t// Only plain objects, arrays, and \"immerable classes\" are drafted.\n\t\tif (isDraftable(base)) {\n\t\t\tconst scope = enterScope(this)\n\t\t\tconst proxy = createProxy(this, base, undefined)\n\t\t\tlet hasError = true\n\t\t\ttry {\n\t\t\t\tresult = recipe(proxy)\n\t\t\t\thasError = false\n\t\t\t} finally {\n\t\t\t\t// finally instead of catch + rethrow better preserves original stack\n\t\t\t\tif (hasError) revokeScope(scope)\n\t\t\t\telse leaveScope(scope)\n\t\t\t}\n\t\t\tif (typeof Promise !== \"undefined\" && result instanceof Promise) {\n\t\t\t\treturn result.then(\n\t\t\t\t\tresult => {\n\t\t\t\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\t\t\t\treturn processResult(result, scope)\n\t\t\t\t\t},\n\t\t\t\t\terror => {\n\t\t\t\t\t\trevokeScope(scope)\n\t\t\t\t\t\tthrow error\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\treturn processResult(result, scope)\n\t\t} else if (!base || typeof base !== \"object\") {\n\t\t\tresult = recipe(base)\n\t\t\tif (result === NOTHING) return undefined\n\t\t\tif (result === undefined) result = base\n\t\t\tif (this.autoFreeze_) freeze(result, true)\n\t\t\treturn result\n\t\t} else die(21, base)\n\t}\n\n\tproduceWithPatches(arg1: any, arg2?: any, arg3?: any): any {\n\t\tif (typeof arg1 === \"function\") {\n\t\t\treturn (state: any, ...args: any[]) =>\n\t\t\t\tthis.produceWithPatches(state, (draft: any) => arg1(draft, ...args))\n\t\t}\n\n\t\tlet patches: Patch[], inversePatches: Patch[]\n\t\tconst nextState = this.produce(arg1, arg2, (p: Patch[], ip: Patch[]) => {\n\t\t\tpatches = p\n\t\t\tinversePatches = ip\n\t\t})\n\t\treturn [nextState, patches!, inversePatches!]\n\t}\n\n\tcreateDraft<T extends Objectish>(base: T): Draft<T> {\n\t\tif (!isDraftable(base)) die(8)\n\t\tif (isDraft(base)) base = current(base)\n\t\tconst scope = enterScope(this)\n\t\tconst proxy = createProxy(this, base, undefined)\n\t\tproxy[DRAFT_STATE].isManual_ = true\n\t\tleaveScope(scope)\n\t\treturn proxy as any\n\t}\n\n\tfinishDraft<D extends Draft<any>>(\n\t\tdraft: D,\n\t\tpatchListener?: PatchListener\n\t): D extends Draft<infer T> ? T : never {\n\t\tconst state: ImmerState = draft && (draft as any)[DRAFT_STATE]\n\t\tif (__DEV__) {\n\t\t\tif (!state || !state.isManual_) die(9)\n\t\t\tif (state.finalized_) die(10)\n\t\t}\n\t\tconst {scope_: scope} = state\n\t\tusePatchesInScope(scope, patchListener)\n\t\treturn processResult(undefined, scope)\n\t}\n\n\t/**\n\t * Pass true to automatically freeze all copies created by Immer.\n\t *\n\t * By default, auto-freezing is enabled.\n\t */\n\tsetAutoFreeze(value: boolean) {\n\t\tthis.autoFreeze_ = value\n\t}\n\n\t/**\n\t * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n\t * always faster than using ES5 proxies.\n\t *\n\t * By default, feature detection is used, so calling this is rarely necessary.\n\t */\n\tsetUseProxies(value: boolean) {\n\t\tif (value && !hasProxies) {\n\t\t\tdie(20)\n\t\t}\n\t\tthis.useProxies_ = value\n\t}\n\n\tapplyPatches(base: Objectish, patches: Patch[]) {\n\t\t// If a patch replaces the entire state, take that replacement as base\n\t\t// before applying patches\n\t\tlet i: number\n\t\tfor (i = patches.length - 1; i >= 0; i--) {\n\t\t\tconst patch = patches[i]\n\t\t\tif (patch.path.length === 0 && patch.op === \"replace\") {\n\t\t\t\tbase = patch.value\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tconst applyPatchesImpl = getPlugin(\"Patches\").applyPatches_\n\t\tif (isDraft(base)) {\n\t\t\t// N.B: never hits if some patch a replacement, patches are never drafts\n\t\t\treturn applyPatchesImpl(base, patches)\n\t\t}\n\t\t// Otherwise, produce a copy of the base state.\n\t\treturn this.produce(base, (draft: Drafted) =>\n\t\t\tapplyPatchesImpl(draft, patches.slice(i + 1))\n\t\t)\n\t}\n}\n\nexport function createProxy<T extends Objectish>(\n\timmer: Immer,\n\tvalue: T,\n\tparent?: ImmerState\n): Drafted<T, ImmerState> {\n\t// precondition: createProxy should be guarded by isDraftable, so we know we can safely draft\n\tconst draft: Drafted = isMap(value)\n\t\t? getPlugin(\"MapSet\").proxyMap_(value, parent)\n\t\t: isSet(value)\n\t\t? getPlugin(\"MapSet\").proxySet_(value, parent)\n\t\t: immer.useProxies_\n\t\t? createProxyProxy(value, parent)\n\t\t: getPlugin(\"ES5\").createES5Proxy_(value, parent)\n\n\tconst scope = parent ? parent.scope_ : getCurrentScope()\n\tscope.drafts_.push(draft)\n\treturn draft\n}\n","import {\n\tdie,\n\tisDraft,\n\tshallowCopy,\n\teach,\n\tDRAFT_STATE,\n\tget,\n\tset,\n\tImmerState,\n\tisDraftable,\n\tArchtypeMap,\n\tArchtypeSet,\n\tgetArchtype,\n\tgetPlugin\n} from \"../internal\"\n\n/** Takes a snapshot of the current state of a draft and finalizes it (but without freezing). This is a great utility to print the current state during debugging (no Proxies in the way). The output of current can also be safely leaked outside the producer. */\nexport function current<T>(value: T): T\nexport function current(value: any): any {\n\tif (!isDraft(value)) die(22, value)\n\treturn currentImpl(value)\n}\n\nfunction currentImpl(value: any): any {\n\tif (!isDraftable(value)) return value\n\tconst state: ImmerState | undefined = value[DRAFT_STATE]\n\tlet copy: any\n\tconst archType = getArchtype(value)\n\tif (state) {\n\t\tif (\n\t\t\t!state.modified_ &&\n\t\t\t(state.type_ < 4 || !getPlugin(\"ES5\").hasChanges_(state as any))\n\t\t)\n\t\t\treturn state.base_\n\t\t// Optimization: avoid generating new drafts during copying\n\t\tstate.finalized_ = true\n\t\tcopy = copyHelper(value, archType)\n\t\tstate.finalized_ = false\n\t} else {\n\t\tcopy = copyHelper(value, archType)\n\t}\n\n\teach(copy, (key, childValue) => {\n\t\tif (state && get(state.base_, key) === childValue) return // no need to copy or search in something that didn't change\n\t\tset(copy, key, currentImpl(childValue))\n\t})\n\t// In the future, we might consider freezing here, based on the current settings\n\treturn archType === ArchtypeSet ? new Set(copy) : copy\n}\n\nfunction copyHelper(value: any, archType: number): any {\n\t// creates a shallow copy, even if it is a map or set\n\tswitch (archType) {\n\t\tcase ArchtypeMap:\n\t\t\treturn new Map(value)\n\t\tcase ArchtypeSet:\n\t\t\t// Set will be cloned as array temporarily, so that we can replace individual items\n\t\t\treturn Array.from(value)\n\t}\n\treturn shallowCopy(value)\n}\n","// Should be no imports here!\n\n// Some things that should be evaluated before all else...\n\n// We only want to know if non-polyfilled symbols are available\nconst hasSymbol =\n\ttypeof Symbol !== \"undefined\" && typeof Symbol(\"x\") === \"symbol\"\nexport const hasMap = typeof Map !== \"undefined\"\nexport const hasSet = typeof Set !== \"undefined\"\nexport const hasProxies =\n\ttypeof Proxy !== \"undefined\" &&\n\ttypeof Proxy.revocable !== \"undefined\" &&\n\ttypeof Reflect !== \"undefined\"\n\n/**\n * The sentinel value returned by producers to replace the draft with undefined.\n */\nexport const NOTHING: Nothing = hasSymbol\n\t? Symbol.for(\"immer-nothing\")\n\t: ({[\"immer-nothing\"]: true} as any)\n\n/**\n * To let Immer treat your class instances as plain immutable objects\n * (albeit with a custom prototype), you must define either an instance property\n * or a static property on each of your custom classes.\n *\n * Otherwise, your class instance will never be drafted, which means it won't be\n * safe to mutate in a produce callback.\n */\nexport const DRAFTABLE: unique symbol = hasSymbol\n\t? Symbol.for(\"immer-draftable\")\n\t: (\"__$immer_draftable\" as any)\n\nexport const DRAFT_STATE: unique symbol = hasSymbol\n\t? Symbol.for(\"immer-state\")\n\t: (\"__$immer_state\" as any)\n\n// Even a polyfilled Symbol might provide Symbol.iterator\nexport const iteratorSymbol: typeof Symbol.iterator =\n\t(typeof Symbol != \"undefined\" && Symbol.iterator) || (\"@@iterator\" as any)\n\n/** Use a class type for `nothing` so its type is unique */\nexport class Nothing {\n\t// This lets us do `Exclude<T, Nothing>`\n\t// @ts-ignore\n\tprivate _!: unique symbol\n}\n","import {\n\tIProduce,\n\tIProduceWithPatches,\n\tImmer,\n\tDraft,\n\tImmutable\n} from \"./internal\"\n\nexport {\n\tDraft,\n\tImmutable,\n\tPatch,\n\tPatchListener,\n\toriginal,\n\tcurrent,\n\tisDraft,\n\tisDraftable,\n\tNOTHING as nothing,\n\tDRAFTABLE as immerable,\n\tfreeze\n} from \"./internal\"\n\nconst immer = new Immer()\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nexport const produce: IProduce = immer.produce\nexport default produce\n\n/**\n * Like `produce`, but `produceWithPatches` always returns a tuple\n * [nextState, patches, inversePatches] (instead of just the next state)\n */\nexport const produceWithPatches: IProduceWithPatches = immer.produceWithPatches.bind(\n\timmer\n)\n\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * Always freeze by default, even in production mode\n */\nexport const setAutoFreeze = immer.setAutoFreeze.bind(immer)\n\n/**\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n * always faster than using ES5 proxies.\n *\n * By default, feature detection is used, so calling this is rarely necessary.\n */\nexport const setUseProxies = immer.setUseProxies.bind(immer)\n\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\nexport const applyPatches = immer.applyPatches.bind(immer)\n\n/**\n * Create an Immer draft from the given base state, which may be a draft itself.\n * The draft can be modified until you finalize it with the `finishDraft` function.\n */\nexport const createDraft = immer.createDraft.bind(immer)\n\n/**\n * Finalize an Immer draft from a `createDraft` call, returning the base state\n * (if no changes were made) or a modified copy. The draft must *not* be\n * mutated afterwards.\n *\n * Pass a function as the 2nd argument to generate Immer patches based on the\n * changes that were made.\n */\nexport const finishDraft = immer.finishDraft.bind(immer)\n\n/**\n * This function is actually a no-op, but can be used to cast an immutable type\n * to an draft type and make TypeScript happy\n *\n * @param value\n */\nexport function castDraft<T>(value: T): Draft<T> {\n\treturn value as any\n}\n\n/**\n * This function is actually a no-op, but can be used to cast a mutable type\n * to an immutable type and make TypeScript happy\n * @param value\n */\nexport function castImmutable<T>(value: T): Immutable<T> {\n\treturn value as any\n}\n\nexport {Immer}\n\nexport {enableES5} from \"./plugins/es5\"\nexport {enablePatches} from \"./plugins/patches\"\nexport {enableMapSet} from \"./plugins/mapset\"\nexport {enableAllPlugins} from \"./plugins/all\"\n","export const fetchDataContextStorageDefaultValues = {\n    createAdditionalState: () => {},\n    state: {\n        catalogs: {\n            data: [],\n            loading: true,\n            setters: {\n                setData: () => {},\n                setLoading: () => {},\n            },\n        },\n        appConfig: {\n            data: undefined,\n            loading: true,\n            setters: {\n                setData: () => {},\n                setLoading: () => {},\n            },\n        },\n    }\n};\n","import { PropsWithChildren } from 'react';\r\nimport { useCatalogs } from '../hooks/useCatalogs';\r\n\r\nconst InitialHooksWrapper = ({ children }: PropsWithChildren<any>) => {\r\n    useCatalogs();\r\n\r\n    return children;\r\n};\r\n\r\nexport default InitialHooksWrapper;","import React, { useState, PropsWithChildren } from 'react';\r\nimport { produce } from 'immer';\r\nimport { AppConfigInterface } from '../types/app-config';\r\nimport { CatalogInterface } from '../types/catalog';\r\nimport { fetchDataContextStorageDefaultValues } from './default-values';\r\nimport InitialHooksWrapper from './initial-hooks-wrapper';\r\nimport { AdditionalStateInterface, FetchDataContextStorageInterface } from './types';\r\n\r\nexport const FetchDataContextStorage = React.createContext<FetchDataContextStorageInterface>(fetchDataContextStorageDefaultValues);\r\n\r\nexport const FetchDataContextStorageWrapper = ({ children }: PropsWithChildren<any>): React.ReactElement => {\r\n    const [catalogs, setCatalogs] = useState<CatalogInterface[]>([]);\r\n    const [catalogsLoading, setCatalogsLoading] = useState(true);\r\n    const [appConfig, setAppConfig] = useState<AppConfigInterface | undefined>();\r\n    const [appConfigLoading, setAppConfigLoading] = useState(true);\r\n\r\n    const [additionalState, setAdditionalState] = useState<AdditionalStateInterface>({});\r\n\r\n    const setDataOfAdditionalState = <T,>(key: string, data: T) => {\r\n        const nextState = produce(additionalState, (draft: AdditionalStateInterface<T>) => {\r\n            draft[key].data = data;\r\n        });\r\n\r\n        setAdditionalState(nextState);\r\n    }\r\n\r\n    const setLoadingOfAdditionalState = <T,>(key: string, value: boolean) => {\r\n        const nextState = produce(additionalState, (draft: AdditionalStateInterface<T>) => {\r\n            draft[key].loading = value;\r\n        });\r\n\r\n        setAdditionalState(nextState);\r\n    }\r\n\r\n    const createAdditionalState = <T,>(key: string, defaultValue: T) => {\r\n        if (typeof additionalState[key] === 'undefined') {\r\n            const nextState = produce(additionalState, (draft: AdditionalStateInterface<T>) => {\r\n                draft[key] = {\r\n                    data: defaultValue,\r\n                    loading: true,\r\n                    setters: {\r\n                        setData: (v: T) => setDataOfAdditionalState<T>(key, v),\r\n                        setLoading: (v: boolean) => setLoadingOfAdditionalState<T>(key, v),\r\n                    }\r\n                }\r\n            });\r\n\r\n            setAdditionalState(nextState);\r\n        }\r\n    }\r\n\r\n    const contextValue: FetchDataContextStorageInterface = {\r\n        createAdditionalState,\r\n        state: {\r\n            catalogs: {\r\n                data: catalogs,\r\n                loading: catalogsLoading,\r\n                setters: {\r\n                    setData: setCatalogs,\r\n                    setLoading: setCatalogsLoading,\r\n                },\r\n            },\r\n            appConfig: {\r\n                data: appConfig,\r\n                loading: appConfigLoading,\r\n                setters: {\r\n                    setData: setAppConfig,\r\n                    setLoading: setAppConfigLoading,\r\n                },\r\n            },\r\n            ...additionalState\r\n        }\r\n    };\r\n\r\n    return (\r\n        <FetchDataContextStorage.Provider value={contextValue}>\r\n            <InitialHooksWrapper>\r\n                {children}\r\n            </InitialHooksWrapper>\r\n        </FetchDataContextStorage.Provider>\r\n    );\r\n};\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport { FetchDataContextStorage } from \"../context-storage\";\r\nimport { fetchData } from \"../rest\";\r\nimport { UseFetchInterface, UseFetchParamsWithContext } from \"../types/use-fetch\";\r\n\r\nexport const useFetchContext = <T = any>(\r\n    params: UseFetchParamsWithContext<T>\r\n): UseFetchInterface<T> => {\r\n    const context = useContext(FetchDataContextStorage);\r\n\r\n    const [errorMessage, setErrorMessage] = useState<string | null>(null);\r\n\r\n    const getData = async () => {\r\n        context.state[params.key].setters.setLoading(true);\r\n\r\n        const result = await fetchData<T>(\r\n            params.rest.name,\r\n            params.rest.method,\r\n            params.rest.body\r\n        );\r\n\r\n        if (result.success && result.data) {\r\n            context.state[params.key].setters.setData(result.data);\r\n        } else if (result.success === false) {\r\n            setErrorMessage(result.message);\r\n        }\r\n\r\n        context.state[params.key].setters.setLoading(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (context) {\r\n            if (context.state[params.key] && typeof context.state[params.key] === \"object\") {\r\n                getData();\r\n            } else {\r\n                context.createAdditionalState(params.key, params.defaultValue);\r\n            }\r\n        }\r\n    }, [params.rest]);\r\n\r\n    return {\r\n        data: context && context.state[params.key] ? context.state[params.key].data : params.defaultValue,\r\n        error: errorMessage,\r\n        loading:\r\n            context && context.state[params.key]\r\n                ? context.state[params.key].loading\r\n                : false,\r\n    };\r\n};\r\n","import { CatalogInterface } from '../types/catalog';\r\nimport useFetch from './useFetch';\r\nimport { useFetchContext } from './useFetchContext';\r\n\r\nexport const useCatalogs = (body?: any) => useFetch<CatalogInterface[]>({\r\n    defaultValue: [],\r\n    rest: {\r\n        name: 'catalogs/list',\r\n        method: 'POST',\r\n        body\r\n    }\r\n});\r\n\r\nexport const useCatalogsWithContext = (body?: any) => useFetchContext<CatalogInterface[]>({\r\n    defaultValue: [],\r\n    rest: {\r\n        name: 'catalogs/list',\r\n        method: 'POST',\r\n        body\r\n    },\r\n    key: 'catalogs'\r\n});"],"names":["fetchData","async","restName","method","data","dataType","body","additionalLink","headers","Headers","append","JSON","stringify","response","fetch","credentials","ok","status","Error","url","json","err","success","message","defaultHook","params","loading","setLoading","useState","setData","defaultValue","errorMessage","setErrorMessage","useEffect","result","rest","name","getData","error","die","args","length","map","s","join","isDraft","value","DRAFT_STATE","isDraftable","proto","Object","getPrototypeOf","prototype","Array","isArray","DRAFTABLE","constructor","isMap","isSet","each","obj","iter","enumerableOnly","getArchtype","keys","ownKeys","forEach","key","entry","index","thing","state","type_","has","prop","hasOwnProperty","call","set","propOrOldValue","t","delete","add","target","hasMap","Map","hasSet","Set","latest","copy_","base_","shallowCopy","base","slice","descriptors","getOwnPropertyDescriptors","i","desc","writable","configurable","get","enumerable","create","freeze","deep","isFrozen","clear","dontMutateFrozenCollections","getPlugin","pluginKey","plugin","plugins","getCurrentScope","currentScope","usePatchesInScope","scope","patchListener","patches_","inversePatches_","patchListener_","revokeScope","leaveScope","drafts_","revokeDraft","parent_","enterScope","immer","immer_","canAutoFreeze_","unfinalizedDrafts_","draft","revoke_","revoked_","processResult","baseDraft","isReplaced","useProxies_","willFinalizeES5_","modified_","finalize","maybeFreeze","generateReplacementPatches_","NOTHING","rootScope","path","childValue","finalizeProperty","scope_","finalized_","draft_","generatePatches_","parentState","targetObject","rootPath","res","assigned_","concat","autoFreeze_","peek","getDescriptorFromProto","source","getOwnPropertyDescriptor","markChanged","prepareCopy","createProxy","parent","proxyMap_","proxySet_","isManual_","traps","objectTraps","arrayTraps","Proxy","revocable","revoke","proxy","createES5Proxy_","push","current","currentImpl","copy","archType","hasChanges_","copyHelper","from","hasSymbol","Symbol","hasProxies","Reflect","for","getOwnPropertySymbols","getOwnPropertyNames","_desc$get","currentState","x","y","is","deleteProperty","owner","defineProperty","setPrototypeOf","fn","arguments","apply","this","config","useProxies","setUseProxies","autoFreeze","setAutoFreeze","produce","bind","produceWithPatches","recipe","defaultBase","self","_this","hasError","Promise","then","arg1","arg2","patches","inversePatches","_this2","p","ip","createDraft","finishDraft","applyPatches","patch","op","applyPatchesImpl","applyPatches_","fetchDataContextStorageDefaultValues","createAdditionalState","catalogs","setters","appConfig","undefined","InitialHooksWrapper","children","useCatalogs","FetchDataContextStorage","React","createContext","useFetchContext","context","useContext","useFetch","setCatalogs","catalogsLoading","setCatalogsLoading","setAppConfig","appConfigLoading","setAppConfigLoading","additionalState","setAdditionalState","contextValue","nextState","v","setDataOfAdditionalState","setLoadingOfAdditionalState","Provider"],"mappings":"8KAiBO,MAAMA,EAAYC,MAAgBC,EAAkBC,EAA4BC,EAAyBC,EAAgC,UAC5I,IACIC,EADAC,EAAiB,GAErB,MAAMC,EAAU,IAAIC,QAEpBD,EAAQE,OAAO,SAAU,oBAEL,iBAATN,GAAqC,iBAATA,IACnCG,EAAiB,GAAGH,KAGJ,iBAATA,GAAqC,iBAATA,IAClB,SAAbC,IACAG,EAAQE,OAAO,eAAgB,oBAE/BJ,EAAOK,KAAKC,UAAUR,IAGT,aAAbC,IACAC,EAAOF,IAIf,IACI,MAAMS,QAAiBC,MAAM,GAAGZ,IAAWK,IAAkB,CACzDJ,OAAAA,EACAG,KAAAA,EACAE,QAAAA,EACAO,YAAa,gBAGjB,IAAoB,IAAhBF,EAASG,GACT,MAAwB,MAApBH,EAASI,OACH,IAAIC,MAAM,oCAEV,IAAIA,MAAM,GAAGL,EAASM,QAAQN,EAASI,WAIrD,IAGI,aAFmBJ,EAASO,OAG9B,MAAOC,GACL,MAAM,IAAIH,MAAMG,IAEtB,MAAOA,GAGL,MAAO,CACHC,SAAS,EACTC,QAASF,EACTjB,KAAM,QCjEZoB,EAAwBC,IAC5B,MAAOC,EAASC,GAAcC,YAAS,IAChCxB,EAAMyB,GAAWD,WAAYH,EAAOK,eACpCC,EAAcC,GAAmBJ,WAAwB,MAwBhE,OAJAK,aAAU,KAlBMhC,WACd0B,GAAW,GAEX,MAAMO,QAAelC,EACnByB,EAAOU,KAAKC,KACZX,EAAOU,KAAKhC,OACZsB,EAAOU,KAAK7B,MAGV4B,EAAOZ,SAAWY,EAAO9B,KAC3ByB,EAAQK,EAAO9B,OACa,IAAnB8B,EAAOZ,SAChBU,EAAgBE,EAAOX,SAGzBI,GAAW,IAIXU,KACC,CAACZ,EAAOU,KAAK7B,OAET,CACLF,KAAAA,EACAkC,MAAOP,EACPL,QAAAA,aCUYa,EAAID,8BAA+BE,+BAAAA,0BAUxCtB,oCACqBoB,GAC7BE,EAAKC,OAAS,IAAMD,EAAKE,cAAIC,aAASA,SAAMC,KAAK,KAAO,iECpC3CC,EAAQC,WACdA,KAAWA,EAAMC,YAKXC,EAAYF,WACtBA,aAYwBA,OACxBA,GAA0B,iBAAVA,EAAoB,aACnCG,EAAQC,OAAOC,eAAeL,UAC5BG,GAASA,IAAUC,OAAOE,WAbnBN,IACdO,MAAMC,QAAQR,MACZA,EAAMS,MACNT,EAAMU,YAAYD,IACpBE,EAAMX,IACNY,EAAMZ,IA8CR,SAAgBa,EAAKC,EAAUC,EAAWC,YAAAA,IAAAA,MC7DZ,ID8DzBC,EAAYH,IACbE,EAAiBZ,OAAOc,KAAOC,GAASL,GAAKM,kBAAQC,GACjDL,GAAiC,iBAARK,GAAkBN,EAAKM,EAAKP,EAAIO,GAAMP,MAGrEA,EAAIM,kBAASE,EAAYC,UAAeR,EAAKQ,EAAOD,EAAOR,eAK7CG,EAAYO,OAErBC,EAAgCD,EAAMvB,UACrCwB,EACJA,EAAMC,EAAQ,EACbD,EAAMC,EAAQ,EACbD,EAAMC,EACRnB,MAAMC,QAAQgB,GC9EW,EDgFzBb,EAAMa,GC/EiB,EDiFvBZ,EAAMY,GChFiB,EAHG,WDyFdG,EAAIH,EAAYI,UCvFL,IDwFnBX,EAAYO,GAChBA,EAAMG,IAAIC,GACVxB,OAAOE,UAAUuB,eAAeC,KAAKN,EAAOI,GAUhD,SAAgBG,EAAIP,EAAYQ,EAA6BhC,OACtDiC,EAAIhB,EAAYO,GCrGI,IDsGtBS,EAAmBT,EAAMO,IAAIC,EAAgBhC,GCrGvB,IDsGjBiC,GACRT,EAAMU,OAAOF,GACbR,EAAMW,IAAInC,IACJwB,EAAMQ,GAAkBhC,WAchBW,EAAMyB,UACdC,GAAUD,aAAkBE,aAIpB1B,EAAMwB,UACdG,GAAUH,aAAkBI,aAGpBC,EAAOhB,UACfA,EAAMiB,GAASjB,EAAMkB,WAIbC,EAAYC,MACvBtC,MAAMC,QAAQqC,GAAO,OAAOtC,MAAMD,UAAUwC,MAAMhB,KAAKe,OACrDE,EAAcC,EAA0BH,UACvCE,EAAY9C,WACfiB,EAAOC,EAAQ4B,GACVE,EAAI,EAAGA,EAAI/B,EAAKvB,OAAQsD,IAAK,KAC/B5B,EAAWH,EAAK+B,GAChBC,EAAOH,EAAY1B,QACrB6B,EAAKC,WACRD,EAAKC,YACLD,EAAKE,kBAKFF,EAAKG,KAAOH,EAAKnB,OACpBgB,EAAY1B,GAAO,CAClB+B,gBACAD,YACAG,WAAYJ,EAAKI,WACjBtD,MAAO6C,EAAKxB,YAGRjB,OAAOmD,OAAOnD,OAAOC,eAAewC,GAAOE,YAWnCS,EAAU1C,EAAU2C,mBAAAA,IAAAA,MAC/BC,EAAS5C,IAAQf,EAAQe,KAASZ,EAAYY,KAC9CG,EAAYH,GAAO,IACtBA,EAAIiB,IAAMjB,EAAIqB,IAAMrB,EAAI6C,MAAQ7C,EAAIoB,OAAS0B,GAE9CxD,OAAOoD,OAAO1C,GACV2C,GAAM5C,EAAKC,YAAMO,EAAKrB,UAAUwD,EAAOxD,aALoBc,EAShE,SAAS8C,IACRnE,EAAI,YAGWiE,EAAS5C,UACb,MAAPA,GAA8B,iBAARA,GAEnBV,OAAOsD,SAAS5C,YE7JR+C,EACfC,OAEMC,EAASC,EAAQF,UAClBC,GACJtE,EAAI,GAAIqE,GAGFC,EC7BR,SAAgBE,WAERC,WAkBQC,EACfC,EACAC,GAEIA,IACHR,EAAU,WACVO,EAAME,EAAW,GACjBF,EAAMG,EAAkB,GACxBH,EAAMI,EAAiBH,YAITI,EAAYL,GAC3BM,EAAWN,GACXA,EAAMO,EAAQvD,QAAQwD,GAEtBR,EAAMO,EAAU,cAGDD,EAAWN,GACtBA,IAAUF,IACbA,EAAeE,EAAMS,YAIPC,EAAWC,UAClBb,EArCD,CACNS,EAAS,GACTE,EAmCkCX,EAlClCc,EAkCgDD,EA/BhDE,KACAC,EAAoB,GAiCtB,SAASN,EAAYO,OACd1D,EAAoB0D,EAAMlF,GFtDG,IEwDlCwB,EAAMC,GFvD2B,IEwDjCD,EAAMC,EAEND,EAAM2D,IACF3D,EAAM4D,cC7DIC,EAAclG,EAAagF,GAC1CA,EAAMc,EAAqBd,EAAMO,EAAQhF,WACnC4F,EAAYnB,EAAMO,EAAS,GAC3Ba,WAAapG,GAAwBA,IAAWmG,SACjDnB,EAAMY,EAAOS,GACjB5B,EAAU,OAAO6B,EAAiBtB,EAAOhF,EAAQoG,GAC9CA,GACCD,EAAUtF,GAAa0F,IAC1BlB,EAAYL,GACZ3E,EAAI,IAEDS,EAAYd,KAEfA,EAASwG,EAASxB,EAAOhF,GACpBgF,EAAMS,GAASgB,EAAYzB,EAAOhF,IAEpCgF,EAAME,GACTT,EAAU,WAAWiC,EACpBP,EAAUtF,GACVb,EACAgF,EAAME,EACNF,EAAMG,IAKRnF,EAASwG,EAASxB,EAAOmB,EAAW,IAErCd,EAAYL,GACRA,EAAME,GACTF,EAAMI,EAAgBJ,EAAME,EAAUF,EAAMG,GAEtCnF,IAAW2G,EAAU3G,SAG7B,SAASwG,EAASI,EAAuBhG,EAAYiG,MAEhDvC,EAAS1D,GAAQ,OAAOA,MAEtByB,EAAoBzB,EAAMC,OAE3BwB,SACJZ,EACCb,YACCqB,EAAK6E,UACLC,EAAiBH,EAAWvE,EAAOzB,EAAOqB,EAAK6E,EAAYD,SAGtDjG,KAGJyB,EAAM2E,IAAWJ,EAAW,OAAOhG,MAElCyB,EAAMkE,SACVE,EAAYG,EAAWvE,EAAMkB,MACtBlB,EAAMkB,MAGTlB,EAAM4E,EAAY,CACtB5E,EAAM4E,KACN5E,EAAM2E,EAAOlB,QACP9F,EH1D0B,IG4D/BqC,EAAMC,GH3DwB,IG2DQD,EAAMC,EACxCD,EAAMiB,EAAQE,EAAYnB,EAAM6E,GACjC7E,EAAMiB,EAKV7B,EHhE0B,IGiEzBY,EAAMC,EAAyB,IAAIc,IAAIpD,GAAUA,YAChDiC,EAAK6E,UACLC,EAAiBH,EAAWvE,EAAOrC,EAAQiC,EAAK6E,EAAYD,MAG9DJ,EAAYG,EAAW5G,MAEnB6G,GAAQD,EAAU1B,GACrBT,EAAU,WAAW0C,EACpB9E,EACAwE,EACAD,EAAU1B,EACV0B,EAAUzB,UAIN9C,EAAMiB,EAGd,SAASyD,EACRH,EACAQ,EACAC,EACA7E,EACAsE,EACAQ,MAGI3G,EAAQmG,GAAa,KASlBS,EAAMf,EAASI,EAAWE,EAP/BQ,GACAF,GHhGyB,IGiGzBA,EAAa9E,IACZC,EAAK6E,EAA8CI,EAAYhF,GAC7D8E,EAAUG,OAAOjF,cAIrBG,EAAI0E,EAAc7E,EAAM+E,IAGpB5G,EAAQ4G,GAEL,OADNX,EAAUf,QAIR/E,EAAYgG,KAAgBxC,EAASwC,GAAa,KAChDF,EAAUhB,EAAO8B,GAAed,EAAUd,EAAqB,SAQpEU,EAASI,EAAWE,GAEfM,GAAgBA,EAAYJ,EAAOvB,GACvCgB,EAAYG,EAAWE,IAI1B,SAASL,EAAYzB,EAAmBpE,EAAYyD,YAAAA,IAAAA,MAC/CW,EAAMY,EAAO8B,GAAe1C,EAAMa,GACrCzB,EAAOxD,EAAOyD,GCkEhB,SAASsD,EAAK5B,EAAgBvD,OACvBH,EAAQ0D,EAAMlF,UACLwB,EAAQgB,EAAOhB,GAAS0D,GACzBvD,GAcf,SAASoF,EACRC,EACArF,MAGMA,KAAQqF,UACV9G,EAAQC,OAAOC,eAAe4G,GAC3B9G,GAAO,KACP+C,EAAO9C,OAAO8G,yBAAyB/G,EAAOyB,MAChDsB,EAAM,OAAOA,EACjB/C,EAAQC,OAAOC,eAAeF,aAKhBgH,EAAY1F,GACtBA,EAAMkE,IACVlE,EAAMkE,KACFlE,EAAMoD,GACTsC,EAAY1F,EAAMoD,aAKLuC,EAAY3F,GACtBA,EAAMiB,IACVjB,EAAMiB,EAAQE,EAAYnB,EAAMkB,IC1DlC,SAAgB0E,EACftC,EACA/E,EACAsH,OAGMnC,EAAiBxE,EAAMX,GAC1B6D,EAAU,UAAU0D,EAAUvH,EAAOsH,GACrC1G,EAAMZ,GACN6D,EAAU,UAAU2D,EAAUxH,EAAOsH,GACrCvC,EAAMU,WDxKT5C,EACAyE,OAEM9G,EAAUD,MAAMC,QAAQqC,GACxBpB,EAAoB,CACzBC,EAAOlB,EJ/B0B,EADC,EIkClC4F,EAAQkB,EAASA,EAAOlB,EAASnC,IAEjC0B,KAEAU,KAEAO,EAAW,GAEX/B,EAASyC,EAET3E,EAAOE,EAEPyD,EAAQ,KAER5D,EAAO,KAEP0C,EAAS,KACTqC,MASGrF,EAAYX,EACZiG,EAA2CC,EAC3CnH,IACH4B,EAAS,CAACX,GACViG,EAAQE,SAGeC,MAAMC,UAAU1F,EAAQsF,GAAzCK,IAAAA,OAAQC,IAAAA,aACfvG,EAAM6E,EAAS0B,EACfvG,EAAM2D,EAAU2C,EACTC,GC8HahI,EAAOsH,GACxBzD,EAAU,OAAOoE,EAAgBjI,EAAOsH,UAE7BA,EAASA,EAAOlB,EAASnC,KACjCU,EAAQuD,KAAK/C,GACZA,WC/MQgD,EAAQnI,UAClBD,EAAQC,IAAQP,EAAI,GAAIO,GAI9B,SAASoI,EAAYpI,OACfE,EAAYF,GAAQ,OAAOA,MAE5BqI,EADE5G,EAAgCzB,EAAMC,GAEtCqI,EAAWrH,EAAYjB,MACzByB,EAAO,KAERA,EAAMkE,IACNlE,EAAMC,EAAQ,IAAMmC,EAAU,OAAO0E,EAAY9G,IAElD,OAAOA,EAAMkB,EAEdlB,EAAM4E,KACNgC,EAAOG,EAAWxI,EAAOsI,GACzB7G,EAAM4E,UAENgC,EAAOG,EAAWxI,EAAOsI,UAG1BzH,EAAKwH,YAAOhH,EAAK6E,GACZzE,YPwEcD,EAA2BI,UC9FpB,IDgGnBX,EAAYO,GAAyBA,EAAM6B,IAAIzB,GAAQJ,EAAMI,GO1EtDyB,CAAI5B,EAAMkB,EAAOtB,KAAS6E,GACvCnE,EAAIsG,EAAMhH,EAAK+G,EAAYlC,ONtBF,IMyBnBoC,EAA2B,IAAI9F,IAAI6F,GAAQA,EAxBnD,CAHoBrI,GA8BpB,SAASwI,EAAWxI,EAAYsI,UAEvBA,QN/BkB,SMiCjB,IAAIhG,IAAItC,QNhCS,SMmCjBO,MAAMkI,KAAKzI,UAEb4C,EAAY5C,SJjChBkE,EKrBEwE,EACa,oBAAXC,QAAiD,iBAAhBA,OAAO,KACnCtG,EAAwB,oBAARC,IAChBC,EAAwB,oBAARC,IAChBoG,EACK,oBAAVf,gBACAA,MAAMC,WACM,oBAAZe,QAKK9C,EAAmB2C,EAC7BC,OAAOG,IAAI,yBACR,uBAUOrI,EAA2BiI,EACrCC,OAAOG,IAAI,mBACV,qBAES7I,EAA6ByI,EACvCC,OAAOG,IAAI,eACV,iBRmBS3H,EACO,oBAAZ0H,SAA2BA,QAAQ1H,QACvC0H,QAAQ1H,iBACDf,OAAO2I,sBACd,SAAAjI,UACAV,OAAO4I,oBAAoBlI,GAAK+F,OAC/BzG,OAAO2I,sBAAsBjI,KAEHV,OAAO4I,oBAEzBhG,EACZ5C,OAAO4C,2BACP,SAAmCZ,OAE5BuE,EAAW,UACjBxF,EAAQiB,GAAQhB,kBAAQC,GACvBsF,EAAItF,GAAOjB,OAAO8G,yBAAyB9E,EAAQf,MAE7CsF,GEvDH3C,EA4BF,GGuDS2D,EAAwC,CACpDtE,aAAI5B,EAAOG,MACNA,IAAS3B,EAAa,OAAOwB,MAE3BwF,EAASxE,EAAOhB,OACjBE,EAAIsF,EAAQrF,UA6HnB,SAA2BH,EAAmBwF,EAAarF,SACpDsB,EAAO8D,EAAuBC,EAAQrF,UACrCsB,EACJ,UAAWA,EACVA,EAAKlD,gBAGLkD,EAAKG,wBAAL4F,EAAUnH,KAAKL,EAAM6E,UAP1B,CA3H4B7E,EAAOwF,EAAQrF,OAEnC5B,EAAQiH,EAAOrF,UACjBH,EAAM4E,IAAenG,EAAYF,GAC7BA,EAIJA,IAAU+G,EAAKtF,EAAMkB,EAAOf,IAC/BwF,EAAY3F,GACJA,EAAMiB,EAAOd,GAAeyF,EACnC5F,EAAM2E,EAAOpB,EACbhF,EACAyB,IAGKzB,GAER2B,aAAIF,EAAOG,UACHA,KAAQa,EAAOhB,IAEvBN,iBAAQM,UACAoH,QAAQ1H,QAAQsB,EAAOhB,KAE/BM,aACCN,EACAG,EACA5B,OAEMkD,EAAO8D,EAAuBvE,EAAOhB,GAAQG,MAC/CsB,MAAAA,SAAAA,EAAMnB,WAGTmB,EAAKnB,IAAID,KAAKL,EAAM6E,EAAQtG,UAGxByB,EAAMkE,EAAW,KAGfwC,EAAUpB,EAAKtE,EAAOhB,GAAQG,GAE9BsH,EAAiCf,MAAAA,SAAAA,EAAUlI,MAC7CiJ,GAAgBA,EAAavG,IAAU3C,SAC1CyB,EAAMiB,EAAOd,GAAQ5B,EACrByB,EAAMmF,EAAUhF,qBLpBDuH,EAAQC,UAEtBD,IAAMC,EACI,IAAND,GAAW,EAAIA,GAAM,EAAIC,EAEzBD,GAAMA,GAAKC,GAAMA,EKkBnBC,CAAGrJ,EAAOmI,cAAanI,GAAuB2B,EAAIF,EAAMkB,EAAOf,IAClE,SACDwF,EAAY3F,GACZ0F,EAAY1F,UAGbA,EAAMiB,EAAOd,GAAQ5B,EACrByB,EAAMmF,EAAUhF,UAGjB0H,wBAAe7H,EAAOG,mBAEjBmF,EAAKtF,EAAMkB,EAAOf,IAAuBA,KAAQH,EAAMkB,GAC1DlB,EAAMmF,EAAUhF,MAChBwF,EAAY3F,GACZ0F,EAAY1F,WAGLA,EAAMmF,EAAUhF,GAGpBH,EAAMiB,UAAcjB,EAAMiB,EAAMd,OAKrCsF,kCAAyBzF,EAAOG,OACzB2H,EAAQ9G,EAAOhB,GACfyB,EAAO2F,QAAQ3B,yBAAyBqC,EAAO3H,UAChDsB,EACE,CACNC,YACAC,aJjKgC,IIiKlB3B,EAAMC,GAA0C,WAATE,EACrD0B,WAAYJ,EAAKI,WACjBtD,MAAOuJ,EAAM3H,IALIsB,GAQnBsG,0BACC/J,EAAI,KAELY,wBAAeoB,UACPrB,OAAOC,eAAeoB,EAAMkB,IAEpC8G,0BACChK,EAAI,MAQAmI,EAA8C,GACpD/G,EAAK8G,YAActG,EAAKqI,GAEvB9B,EAAWvG,GAAO,kBACjBsI,UAAU,GAAKA,UAAU,GAAG,GACrBD,EAAGE,MAAMC,KAAMF,eAGxB/B,EAAW0B,eAAiB,SAAS7H,EAAOG,UAEpC+F,EAAY2B,eAAgBxH,KAAK+H,KAAMpI,EAAM,GAAIG,IAEzDgG,EAAW7F,IAAM,SAASN,EAAOG,EAAM5B,UAE/B2H,EAAY5F,IAAKD,KAAK+H,KAAMpI,EAAM,GAAIG,EAAM5B,EAAOyB,EAAM,SItM3DsD,EAAQ,IHYd,sBAKa+E,UAJWlB,YAKY,kBAAvBkB,MAAAA,SAAAA,EAAQC,aAClBF,KAAKG,cAAcF,EAAQC,YACM,kBAAvBD,MAAAA,SAAAA,EAAQG,aAClBJ,KAAKK,cAAcJ,EAAQG,iBACvBE,QAAUN,KAAKM,QAAQC,KAAKP,WAC5BQ,mBAAqBR,KAAKQ,mBAAmBD,KAAKP,iCAsBxDM,QAAA,SAAQtH,EAAWyH,EAAcjG,MAEZ,mBAATxB,GAAyC,mBAAXyH,EAAuB,KACzDC,EAAcD,EACpBA,EAASzH,MAEH2H,EAAOX,YACN,SAENhH,uBAAAA,IAAAA,EAAO0H,8BACJ7K,+BAAAA,2BAEI8K,EAAKL,QAAQtH,YAAOsC,kBAAmBmF,GAAOxI,cAAK2I,EAAMtF,UAAUzF,YAQxEN,KAJkB,mBAAXkL,GAAuB7K,EAAI,YAClC4E,GAAwD,mBAAlBA,GACzC5E,EAAI,GAKDS,EAAY2C,GAAO,KAChBuB,EAAQU,EAAW+E,MACnB7B,EAAQX,EAAYwC,KAAMhH,UAC5B6H,SAEHtL,EAASkL,EAAOtC,GAChB0C,aAGIA,EAAUjG,EAAYL,GACrBM,EAAWN,SAEM,oBAAZuG,SAA2BvL,aAAkBuL,QAChDvL,EAAOwL,eACbxL,UACC+E,EAAkBC,EAAOC,GAClBiB,EAAclG,EAAQgF,eAE9B5E,SACCiF,EAAYL,GACN5E,MAIT2E,EAAkBC,EAAOC,GAClBiB,EAAclG,EAAQgF,IACvB,IAAKvB,GAAwB,iBAATA,EAAmB,KAC7CzD,EAASkL,EAAOzH,MACDkD,EAAS,uBACpB3G,IAAsBA,EAASyD,GAC/BgH,KAAK/C,GAAatD,EAAOpE,MACtBA,EACDK,EAAI,GAAIoD,MAGhBwH,mBAAA,SAAmBQ,EAAWC,OAMzBC,EAAkBC,eALF,mBAATH,EACH,SAACpJ,8BAAe/B,+BAAAA,2BACtBuL,EAAKZ,mBAAmB5I,YAAQ0D,UAAe0F,gBAAK1F,UAAUzF,QAQzD,CAJWmK,KAAKM,QAAQU,EAAMC,YAAOI,EAAYC,GACvDJ,EAAUG,EACVF,EAAiBG,KAECJ,EAAUC,MAG9BI,YAAA,SAAiCvI,GAC3B3C,EAAY2C,IAAOpD,EAAI,GACxBM,EAAQ8C,KAAOA,EAAOsF,EAAQtF,QAC5BuB,EAAQU,EAAW+E,MACnB7B,EAAQX,EAAYwC,KAAMhH,iBAChCmF,EAAM/H,GAAawH,KACnB/C,EAAWN,GACJ4D,KAGRqD,YAAA,SACClG,EACAd,OAOeD,GALWe,GAAUA,EAAclF,IAK3CmG,SACPjC,EAAkBC,EAAOC,GAClBiB,SAAyBlB,MAQjC8F,cAAA,SAAclK,QACR8G,EAAc9G,KASpBgK,cAAA,SAAchK,GACTA,IAAU4I,GACbnJ,EAAI,SAEAgG,EAAczF,KAGpBsL,aAAA,SAAazI,EAAiBkI,OAGzB9H,MACCA,EAAI8H,EAAQpL,OAAS,EAAGsD,GAAK,EAAGA,IAAK,KACnCsI,EAAQR,EAAQ9H,MACI,IAAtBsI,EAAMtF,KAAKtG,QAA6B,YAAb4L,EAAMC,GAAkB,CACtD3I,EAAO0I,EAAMvL,iBAKTyL,EAAmB5H,EAAU,WAAW6H,SAC1C3L,EAAQ8C,GAEJ4I,EAAiB5I,EAAMkI,GAGxBlB,KAAKM,QAAQtH,YAAOsC,UAC1BsG,EAAiBtG,EAAO4F,EAAQjI,MAAMG,EAAI,UA1K7C,IGSakH,EAAoBpF,EAAMoF,QAOgBpF,EAAMsF,mBAAmBD,KAC/ErF,GAQ4BA,EAAMmF,cAAcE,KAAKrF,GAQzBA,EAAMiF,cAAcI,KAAKrF,GAO1BA,EAAMuG,aAAalB,KAAKrF,GAMzBA,EAAMqG,YAAYhB,KAAKrF,GAUvBA,EAAMsG,YAAYjB,KAAKrF,GC1F3C,MAAM4G,EAAuC,CAChDC,sBAAuB,OACvBnK,MAAO,CACHoK,SAAU,CACNvO,KAAM,GACNsB,SAAS,EACTkN,QAAS,CACL/M,QAAS,OACTF,WAAY,SAGpBkN,UAAW,CACPzO,UAAM0O,EACNpN,SAAS,EACTkN,QAAS,CACL/M,QAAS,OACTF,WAAY,WCbtBoN,GAAsB,EAAGC,SAAAA,MAC3BC,KAEOD,GCEEE,GAA0BC,UAAMC,cAAgDX,GCHhFY,GACT5N,IAEA,MAAM6N,EAAUC,aAAWL,KAEpBnN,EAAcC,GAAmBJ,WAAwB,MA8BhE,OAVAK,aAAU,KACFqN,IACIA,EAAQ/K,MAAM9C,EAAO0C,MAA6C,iBAA9BmL,EAAQ/K,MAAM9C,EAAO0C,KApBrDlE,WACZqP,EAAQ/K,MAAM9C,EAAO0C,KAAKyK,QAAQjN,YAAW,GAE7C,MAAMO,QAAelC,EACjByB,EAAOU,KAAKC,KACZX,EAAOU,KAAKhC,OACZsB,EAAOU,KAAK7B,MAGZ4B,EAAOZ,SAAWY,EAAO9B,KACzBkP,EAAQ/K,MAAM9C,EAAO0C,KAAKyK,QAAQ/M,QAAQK,EAAO9B,OACvB,IAAnB8B,EAAOZ,SACdU,EAAgBE,EAAOX,SAG3B+N,EAAQ/K,MAAM9C,EAAO0C,KAAKyK,QAAQjN,YAAW,IAMrCU,GAEAiN,EAAQZ,sBAAsBjN,EAAO0C,IAAK1C,EAAOK,iBAG1D,CAACL,EAAOU,OAEJ,CACH/B,KAAMkP,GAAWA,EAAQ/K,MAAM9C,EAAO0C,KAAOmL,EAAQ/K,MAAM9C,EAAO0C,KAAK/D,KAAOqB,EAAOK,aACrFQ,MAAOP,EACPL,WACI4N,IAAWA,EAAQ/K,MAAM9C,EAAO0C,OAC1BmL,EAAQ/K,MAAM9C,EAAO0C,KAAKzC,UCzC/BuN,GAAe3O,GAAekP,EAA6B,CACpE1N,aAAc,GACdK,KAAM,CACFC,KAAM,gBACNjC,OAAQ,OACRG,KAAAA,+EFCsC,EAAG0O,SAAAA,MAC7C,MAAOL,EAAUc,GAAe7N,WAA6B,KACtD8N,EAAiBC,GAAsB/N,YAAS,IAChDiN,EAAWe,GAAgBhO,cAC3BiO,EAAkBC,GAAuBlO,YAAS,IAElDmO,EAAiBC,GAAsBpO,WAAmC,IAmC3EqO,EAAiD,CACnDvB,sBAlB0B,CAAKvK,EAAarC,KAC5C,QAAoC,IAAzBiO,EAAgB5L,GAAsB,CAC7C,MAAM+L,EAAYjD,EAAQ8C,GAAkB9H,IACxCA,EAAM9D,GAAO,CACT/D,KAAM0B,EACNJ,SAAS,EACTkN,QAAS,CACL/M,QAAUsO,GAvBG,EAAKhM,EAAa/D,KAC/C,MAAM8P,EAAYjD,EAAQ8C,GAAkB9H,IACxCA,EAAM9D,GAAK/D,KAAOA,KAGtB4P,EAAmBE,IAkBgBE,CAA4BjM,EAAKgM,GACpDxO,WAAawO,GAhBG,EAAKhM,EAAarB,KAClD,MAAMoN,EAAYjD,EAAQ8C,GAAkB9H,IACxCA,EAAM9D,GAAKzC,QAAUoB,KAGzBkN,EAAmBE,IAWyBG,CAA+BlM,EAAKgM,QAK5EH,EAAmBE,KAMvB3L,qBACIoK,SAAU,CACNvO,KAAMuO,EACNjN,QAASgO,EACTd,QAAS,CACL/M,QAAS4N,EACT9N,WAAYgO,IAGpBd,UAAW,CACPzO,KAAMyO,EACNnN,QAASmO,EACTjB,QAAS,CACL/M,QAAS+N,EACTjO,WAAYmO,KAGjBC,IAIX,OACIZ,wBAACD,GAAwBoB,UAASxN,MAAOmN,GACrCd,wBAACJ,QACIC,2DEhEsB1O,GAAe+O,GAAoC,CACtFvN,aAAc,GACdK,KAAM,CACFC,KAAM,gBACNjC,OAAQ,OACRG,KAAAA,GAEJ6D,IAAK"}